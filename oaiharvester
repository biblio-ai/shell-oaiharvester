#!/bin/bash

# Copyright 2012-2020 Wim Muskee <wimmuskee@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

VERSION="2.0.0_alpha"
VERB="ListRecords"
CONFIGFILE="/etc/shell-oaiharvester/config.xml"
INSTALLDIR="/usr/share/shell-oaiharvester"
COMPRESS="false"
LISTREPOS="false"
TEST="false"
PID="$$"

function usage {
cat <<EOF
Usage: $0 [OPTION]

Harvest an OAI-PMH target that is configured. Use the configuration file to configure each
repository you want to harvest.

Options:
  -c, --config[=path]           Set a custom configuration file to use. By default, then
                                one in /etc/shell-oaiharvester/config.xml is used.
  -d, --dev                     Harvest from development source directory.
  -h, --help                    Displays the shell-oaiharvester help message.
  -l, --list-repos              List all repositories in config.
  -n, --no-records              When this is set, no record content is saved, only an
                                empty file.
  -r, --repository[=id]         Sets the repository identifier to harvest. This corresponds
                                with the identifier in the config file.
  -t, --test                    Do not harvest, but test if the repository validates.
  -v, --version                 Displays the shell-oaiharvester version.
  -z, --compress                Compress stored records with xz.
EOF
}

function cleanup {
	arg=${1:-1}

	if [ ! -z ${TMP} ]; then
		if [ "${arg}" == 0 ]; then
			echo "Removing temporary workfiles"
			rm -rf ${TMP}
		else
			echo "Maybe you want to see or delete the temporary workfiles in ${TMP}"
		fi
	fi

	exit $arg
}

function die {
	echo "Error: $@" >&2
	cleanup 1
}

trap cleanup SIGHUP SIGINT SIGTERM

# root check
[ $(whoami) == "root" ] && die "Don't use this tool logged in as root."

# dependency check
for dep in bc curl grep xsltproc; do
	which ${dep} &>/dev/null || die "Dependency not found: ${dep}"
done

# Reading options
if ! args=$(getopt -n "$0" -o "c:dhlnr:tvz" \
	-l "compress,config:,dev,help,list-repos,no-records,repository:,test,version" -- "$@")
then
	exit 1
fi
eval "set -- $args"
while true ; do
	case "$1" in
		--config|-c) shift; CONFIGFILE=$1 ;;
		--dev|-d) INSTALLDIR="libs" ;;
		--help|-h) usage; exit 0 ;;
		--repository|-r) shift; REPOSITORY=$1 ;;
		--list-repos|-l) LISTREPOS="true" ;;
		--no-records|-n) VERB="ListIdentifiers" ;;
		--test|-t) TEST="true" ;;
		--version|-v) echo "${VERSION}"; exit 0 ;;
		--compress|-z) COMPRESS="true" ;;
		--) shift ; break ;;
		*) die "$0: Internal error!" ;;
	esac
	shift
done

# Loading functions
source "${INSTALLDIR}/functions.sh" 2>/dev/null || die "No functions found in: ${INSTALLDIR}/functions.sh"

# Check config file
if [ -z ${CONFIGFILE} ] || [ ! -f ${CONFIGFILE} ]; then
	die "Config file not found: ${CONFIGFILE}"
fi

# Perform list repos, otherwise continue with regular harvesting
if [ "${LISTREPOS}" == "true" ]; then
	getGenericConfig "listrepos"
	exit 0
fi

# Check repository id
[ -z ${REPOSITORY} ] && die "No repository id provided"


# Reading oai repository info
RECORDPATH=$(getGenericConfig "recordpath")
TMP=$(getGenericConfig "temppath")
LOGFILE=$(getGenericConfig "logfile")
RECORDLOGFILE=$(getGenericConfig "recordlogfile")
CURL_OPTS=$(getGenericConfig "curlopts")
UPDATE_CMD=$(getGenericConfig "updatecmd")
DELETE_CMD=$(getGenericConfig "deletecmd")
BASEURL=$(getRepositoryConfig "baseurl" ${REPOSITORY})
PREFIX=$(getRepositoryConfig "metadataprefix" ${REPOSITORY})
SET=$(getRepositoryConfig "set" ${REPOSITORY})
FROM=$(getRepositoryConfig "from" ${REPOSITORY})
UNTIL=$(getRepositoryConfig "until" ${REPOSITORY})
RESUMPTION=$(getRepositoryConfig "resumptiontoken" ${REPOSITORY})
CONDITIONAL=$(getRepositoryConfig "conditional" ${REPOSITORY})
REPOSITORY_RECORDPATH=$(getRepositoryConfig "repository_path" ${REPOSITORY})
REPOSITORY_UPDATE_CMD=$(getRepositoryConfig "repository_updatecmd" ${REPOSITORY})
REPOSITORY_DELETE_CMD=$(getRepositoryConfig "repository_deletecmd" ${REPOSITORY})
REPOSITORY_CURL_OPTS=$(getRepositoryConfig "repository_curlopts" ${REPOSITORY})
REPOSITORY_USERNAME=$(getRepositoryConfig "username" ${REPOSITORY})
REPOSITORY_PASSWORD=$(getRepositoryConfig "password" ${REPOSITORY})

# checking required values
[ -z ${BASEURL} ] && die "No baseurl found for repository: ${REPOSITORY}"
[ -z ${PREFIX} ] && die "No prefix found for repository: ${REPOSITORY}"

# Setting other arguments if set in config.
[ ! -z ${SET} ] && URI_SET="&set=${SET}"
[ ! -z ${UNTIL} ] && URI_UNTIL="&until=$UNTIL"

# Set some sane defaults
# all workfiles go into a random tmp directory
RECORDPATH=${RECORDPATH:-/tmp}
TMP=${TMP:-/tmp/oaiharvester}
REPOSITORY_RECORDPATH=${REPOSITORY_RECORDPATH:-${RECORDPATH}/${REPOSITORY}}
REPOSITORY_STATUSFILE="${REPOSITORY_RECORDPATH}/.oaiharvester"
LOGFILE=${LOGFILE:-/tmp/oaiharvester-log.csv}
RECORDLOGFILE=${RECORDLOGFILE:-/dev/null}

# Override common curl options if repository curl options are defined
[ ! -z "${REPOSITORY_CURL_OPTS}" ] && CURL_OPTS="${REPOSITORY_CURL_OPTS}"

# Setting credentials for curl
CREDENTIALS=${REPOSITORY_USERNAME}
[ ! -z "${REPOSITORY_PASSWORD}" ] && CREDENTIALS="${CREDENTIALS}:${REPOSITORY_PASSWORD}"
[ ! -z "${CREDENTIALS}" ] && CURL_OPTS="${CURL_OPTS} -u ${CREDENTIALS}" 

echo "Creating temporary workdir in ${TMP}"
mkdir -p ${TMP} 2>/dev/null || die "Not able to create temporary workdir: ${TMP}"

# Find out if we want to validate only
# no need for logfile in this step
if [ "${TEST}" == "true" ]; then
	testRepository
	exit 0
fi

touch ${LOGFILE} 2>/dev/null || die "Logfile not writable: ${LOGFILE}"
touch ${RECORDLOGFILE} 2>/dev/null || die "Record logfile not writable: ${RECORDLOGFILE}"

# Making sure the repository storage dirs exists
if [ -d ${REPOSITORY_RECORDPATH} ]; then
	echo "Using repository storage in ${REPOSITORY_RECORDPATH}"
else
	echo "Creating repository storage in ${REPOSITORY_RECORDPATH}"
	mkdir -p ${REPOSITORY_RECORDPATH} 2>/dev/null || die "Not able to create repository storage: ${REPOSITORY_RECORDPATH}"
fi

# Try to load repository status
if [ -f ${REPOSITORY_STATUSFILE} ]; then
	source "${REPOSITORY_RECORDPATH}/.oaiharvester"
else
	# if not there, either new, or pre-2.0.0
	if [ -f "${REPOSITORY_RECORDPATH}/lasttimestamp.txt" ]; then
		REPOSITORY_MAJORVER=1
		LASTTIMESTAMP=$(cat "${REPOSITORY_RECORDPATH}/lasttimestamp.txt")
	fi
fi


# only check status code first time calling
checkHttpStatus $(getHttpStatus "${BASEURL}?verb=Identify")

# and retrieve Identify for granularity and optional firsttimestamp
curl ${CURL_OPTS} "${BASEURL}?verb=Identify" -o ${TMP}/identify.xml

# Checks for a last harvest timestamp, and uses it
# according to the granularity settings
# Overwrites repository FROM config setting.
if [ ! -z ${LASTTIMESTAMP} ]; then
	# check valid timestamp
	if [[ "$(echo ${LASTTIMESTAMP} | grep '^[0-9]\{4\}-[0-1][0-9]-[0-3][0-9]T[0-2][0-9]:[0-5][0-9]:[0-5][0-9]Z$')" == "" ]]; then
		die "Invalid timestamp set"
	fi

	# check out identify for datetime granularity
	granularity=$(getTargetData "granularity" "identify")
	[[ "${granularity}" == "YYYY-MM-DD" ]] && LASTTIMESTAMP=${LASTTIMESTAMP:0:10}
	URI_FROM="&from=${LASTTIMESTAMP}"
else
	# in case of first harvest, use the Identify earliestDatestamp
	# assuming the Identify earliestDatestamp conforms to the repo's granularity
	earliestdatestamp=$(getTargetData "earliestDatestamp" "identify")
	[ ! -z ${earliestdatestamp} ] && URI_FROM="&from=${earliestdatestamp}"

	# however, if FROM is set manually in the config, use that
	# this is useful for debugging purposes
	[ ! -z ${FROM} ] && URI_FROM="&from=${FROM}"
fi

# Sets the initial harvest uri
# if resumptiontoken set, this overrides normal behaviour
if [ "${RESUMPTION}" != "" ]; then
	URL="${BASEURL}?verb=${VERB}&resumptionToken=${RESUMPTION}"
else
	URL="${BASEURL}?verb=${VERB}&metadataPrefix=${PREFIX}${URI_SET}${URI_FROM}${URI_UNTIL}"
fi
echo "Starting harvest with PID ${PID} from: ${URL}"

# Now, get the initial page and the records
# if there is a resumptionToken, retrieve other pages
# Set current timestamp for next harvest
startharvestts=$(date -u +'%FT%TZ')
getRecords

# If oai error on the first page, exit with found error.
ERROR=$(getTargetData "error" "oaipage")
[ "${ERROR}" != "" ] && die ${ERROR}

RESUMPTION=$(getTargetData "resumptiontoken" "oaipage")

while [ "${RESUMPTION}" != "" ]; do
	RESUMPTION=$(echo ${RESUMPTION} | sed -f ${INSTALLDIR}/urlescape.sed)
	URL="${BASEURL}?verb=${VERB}&resumptionToken=${RESUMPTION}"
	getRecords
	RESUMPTION=$(getTargetData "resumptiontoken" "oaipage")
done

# When finished, save status
echo "LASTTIMESTAMP=$startharvestts" > ${REPOSITORY_STATUSFILE}
echo "REPO_VER=$VERSION" >> ${REPOSITORY_STATUSFILE}
echo "REPO_MAJORVER=$(echo $VERSION | cut -d "." -f 1)" >> ${REPOSITORY_STATUSFILE}

cleanup 0

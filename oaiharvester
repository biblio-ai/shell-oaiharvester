#!/bin/bash

# Copyright 2012 Wim Muskee <wimmuskee@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

VERSION="0.9.2"
VERB="ListRecords"
CONFIGFILE="/etc/shell-oaiharvester/config.xml"
INSTALLDIR="/usr/share/shell-oaiharvester"
COMPRESS="false"

function usage {
cat <<EOF
Usage: $0 [OPTION]

Harvest an OAI-PMH target that is configured. Use the configuration file to configure each
repository you want to harvest.

Options:
  -c, --config[=path]           Set a custom configuration file to use. By default, then
                                one in /etc/shell-oaiharvester/config.xml is used.
  -h, --help                    Displays the shell-oaiharvester help message.
  -n, --no-records              When this is set, no record content is saved, only an
                                empty file.
  -r, --repository[=id]         Sets the repository identifier to harvest. This corresponds
                                with the identifier in the config file.
  -v, --version                 Displays the shell-oaiharvester version.
  -z, --compress                Compress stored records with xz.
EOF
}

if [ ! -f "${INSTALLDIR}/functions.sh" ]; then
	echo "Error: No functions found in: ${INSTALLDIR}/functions.sh"
	exit 1
fi
source "${INSTALLDIR}/functions.sh"


# Reading options
if ! args=$(getopt -n "$0" -o "c:hr:nvz" \
	-l "compress,config:,help,repository:,no-records,version" -- "$@")
then
	exit 1
fi
eval "set -- $args"
while true ; do
	case "$1" in
		--config|-c) shift; CONFIGFILE=$1 ;;
		--help|-h) usage; exit 0 ;;
		--repository|-r) shift; REPOSITORY=$1 ;;
		--no-records|-n) VERB="ListIdentifiers" ;;
		--version|-v) echo "${VERSION}"; exit 0 ;;
		--compress|-z) COMPRESS="true" ;;
		--) shift ; break ;;
		*) die "$0: Internal error!" ;;
	esac
	shift
done

# Check repository id
if [ -z ${REPOSITORY} ]; then
	die "Error: No repository id provided"
fi

# Check config file
if [ -z ${CONFIGFILE} ] || [ ! -f ${CONFIGFILE} ]; then
	die "Error: Config file not found: ${CONFIGFILE}"
fi

# Reading oai repository info
RECORDPATH=$(getGenericConfig "recordpath")
TMP=$(getGenericConfig "temppath")
LOGFILE=$(getGenericConfig "logfile")
WGET_OPTS=$(getGenericConfig "wgetopts")
UPDATE_CMD=$(getGenericConfig "updatecmd")
DELETE_CMD=$(getGenericConfig "deletecmd")
BASEURL=$(getRepositoryConfig "baseurl" ${REPOSITORY})
PREFIX=$(getRepositoryConfig "metadataprefix" ${REPOSITORY})
SET=$(getRepositoryConfig "set" ${REPOSITORY})
FROM=$(getRepositoryConfig "from" ${REPOSITORY})
UNTIL=$(getRepositoryConfig "until" ${REPOSITORY})
CONDITIONAL=$(getRepositoryConfig "conditional" ${REPOSITORY})
REPOSITORY_RECORDPATH=$(getRepositoryConfig "repository_path" ${REPOSITORY})

# checking required values
if [ -z ${BASEURL} ]; then
	die "Error: No baseurl found for repository: ${REPOSITORY}"
fi

if [ -z ${PREFIX} ]; then
	die "Error: No prefix found for repository: ${REPOSITORY}"
fi

# Set some sane defaults
RECORDPATH=${RECORDPATH:-/tmp}
TMP=${TMP:-/tmp}
LOGFILE=${LOG:-/tmp/oaiharvester-log.csv}
REPOSITORY_RECORDPATH=${REPOSITORY_RECORDPATH:-${RECORDPATH}/${REPOSITORY}}

if [ ! -w ${LOGFILE} ]; then
	die "Error: Logfile not writable: ${LOGFILE}"
fi

# Making sure the repository storage and tmp dirs exists
echo "Creating repository storage in: ${REPOSITORY_RECORDPATH}"
mkdir -p ${REPOSITORY_RECORDPATH}
mkdir -p ${TMP}
touch ${LOGFILE}
rm -f ${TMP}/oaipage.xml ${TMP}/identify.xml > /dev/null 2>&1


# Setting other arguments if set in config.
if [ "${SET}" != "" ]; then
   URI_SET="&set=${SET}"
fi
if [ "${FROM}" != "" ]; then
   URI_FROM="&from=${FROM}"
fi
if [ "${UNTIL}" != "" ]; then
   URI_UNTIL="&until=$UNTIL"
fi

# Checks for a last harvest timestamp, and uses it
# according to the granularity settings
# Overwrites repository from config setting.
repository_timestamp="${REPOSITORY_RECORDPATH}/lasttimestamp.txt"
if [ -f ${repository_timestamp} ]; then
	# check out identify for datetime granularity
	wget ${WGET_OPTS} "${BASEURL}?verb=Identify" -O ${TMP}/identify.xml
	granularity=$(getTargetData "granularity" "identify")

	if [ "${granularity}" == "YYYY-MM-DDThh:mm:ssZ" ]; then
		timestamp=$(cat ${repository_timestamp})
	else
		timestamp=$(cat ${repository_timestamp} | awk -F "T" '{print $1}')
	fi
	URI_FROM="&from=${timestamp}"
fi

# Sets the initial harvest uri
URL="${BASEURL}?verb=${VERB}&metadataPrefix=${PREFIX}${URI_SET}${URI_FROM}${URI_UNTIL}"
echo "Starting harvest from: ${URL}"

# Now, get the initial page and the records
# if there is a resumptionToken, retrieve other pages
getRecords
RESUMPTION=$(getTargetData "resumptiontoken" "oaipage")

while [ "${RESUMPTION}" != "" ]; do
	URL="${BASEURL}?verb=${VERB}&resumptionToken=${RESUMPTION}"
	getRecords
	RESUMPTION=$(getTargetData "resumptiontoken" "oaipage")
done

# finishing up
date -u +'%FT%TZ' > ${repository_timestamp}
rm -f ${TMP}/oaipage.xml ${TMP}/identify.xml

exit 0
